#!/bin/bash

# Put ports in Switchdev
devlink dev eswitch set pci/0000:41:00.0 mode switchdev
devlink dev eswitch set pci/0000:41:00.1 mode switchdev

# Setup VF's on enp65s0f0np0
echo 10 > /sys/class/net/enp65s0f0np0/device/sriov_numvfs

# Enable hardware offloading
ethtool -K enp65s0f0np0 hw-tc-offload on
ethtool -K enp65s0f1np1 hw-tc-offload on

# Enable Asap Direct and HW offload on OVS
ovs-vsctl set Open_vSwitch . other_config:hw-offload=true
ovs-vsctl set Open_vSwitch . other_config:tc-policy=hw-offload
systemctl restart openvswitch-switch


# Set JUMBO Frames on all 
for iface in $(ls /sys/class/net | grep "^enp65s0f"); do
    ip link set $iface mtu 9000
    ip link set $iface up
done

# Load Bonding module
modprobe bonding mode=802.3ad

# Create Bonding only in OS and not on actual Switch
ip link add mlnx type bond
ip link set mlnx mtu 9000
ip link set enp65s0f0np0 mtu 9000
ip link set enp65s0f1np1 mtu 9000
ip link set enp65s0f0np0 master mlnx
ip link set enp65s0f1np1 master mlnx
ip link set mlnx up

ovs-vsctl --may-exist add-br mlnx-sriov 
ovs-vsctl --may-exist add-port mlnx-sriov mlnx trunks=10,20,30,40,50,60,70,80,90,100
ip link set mlnx-sriov mtu 9000
ip link set mlnx-sriov up 

for i in $(seq 0 9); do
  ovs-vsctl --may-exist add-port mlnx_sriov enp65s0f0r"$i" tag=$((i+1))0
  ip link set enp65s0f0r"$i" mtu 9000
  ip link set enp65s0f0r"$i" up
done
